/*
Technology Exponent Common Utilities For Java (TECUJ)
Copyright (C) 2003,2008  Abdul Habra.
www.tek271.com

This file is part of TECUJ.

TECUJ is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation; version 2.

TECUJ is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with TECUJ; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

You can contact the author at ahabra@yahoo.com
*/
package com.tek271.util.thread;

import java.io.IOException;

import org.apache.commons.io.IOUtils;

import com.tek271.util.collections.array.ArrayUtilities;
import com.tek271.util.string.StringUtility;

/**
 * A wrapper around Runtime.getRuntime().exec()
 * @author Abdul Habra
 * Copyright (C) Abdul Habra 2007
 */
public class OsExecutor {

  private static final String WINDOWS_PREFIX= "cmd /c ";
  private String output;
  private String error;
  private boolean pIsWindows= false;
  private boolean pIsError;
  private boolean pIsPrintOutput;

/**
 * Create an executor that wraps Runtime.getRuntime().exec()
 * @param isWindows if true, then "<code>cmd /c </code>" will be used as a prefix to 
 *        the command.
 * @param isPrintOutput if true, then command's output will be printed to System.out
 *        while error messages will be printed to System.err.  
 */  
  public OsExecutor(boolean isWindows, boolean isPrintOutput) {
    pIsWindows= isWindows;
    pIsPrintOutput= isPrintOutput;
  }

/** create an executor with isWindows=false */
  public OsExecutor(boolean isWindows) {
    this(isWindows, false);
  }
  
/** create an executor with isWindows=false and isPrintOutput=false */
  public OsExecutor() {
    this(false, false);
  }
  
  
/** Run the given command */  
  private void runAndThrow(String[] command) throws IOException {
    if (ArrayUtilities.isEmpty(command)) return;
    
    String prefix= pIsWindows? WINDOWS_PREFIX : StringUtility.EMPTY;
    Process process;
    if (command.length==1) {
      String cmd= prefix + command[0];
      process= Runtime.getRuntime().exec(cmd);
    } else {
      command[0] = prefix + command[0];
      process= Runtime.getRuntime().exec(command);
    }
    extractProcessResults(process);
  }
  
  public boolean run(String[] command) {
    try {
      runAndThrow(command);
      pIsError= false;
      return true;
    } catch (IOException e) {
      pIsError= true;
      return false;
    }
  }
  
/** Run the given command */  
  public boolean run(String command) {
    return run(new String[] {command});
  }
  
  private void extractProcessResults(Process process) throws IOException {
    output= IOUtils.toString( process.getInputStream() );
    error= IOUtils.toString( process.getErrorStream() );
    if (pIsPrintOutput) {
      if (StringUtility.isNotEmpty(output)) {
        System.out.println(output);
      }
      if (isError()) {
        System.err.println(error);
      }
    }
  }
  
/** Get the output of the command */  
  public String getOutput() {
    return output;
  }

/** Get the error generated by the command */  
  public String getError() {
    return error;
  }
  
/** @return true if this is a Windows command as initialized in the constructor */  
  public boolean isWindows() {
    return pIsWindows;
  }
  
/** Was an there an error in the run() */  
  public boolean isError() {
    return pIsError || StringUtility.isNotEmpty(error);
  }
  
/** Is output to be printed to console */  
  public boolean isPrintOutput() {
    return pIsPrintOutput;
  }
  
}
